# reflexive_self_evaluator.py

from ontology.lattice import OntologicalLattice
from logic.modal_overlay import ModalOverlay
from logic.privative_overlay import PrivativeOverlay

class ReflexiveSelfEvaluator:
    def __init__(self, agent_identity: str, lattice: OntologicalLattice):
        self.agent_identity = agent_identity
        self.lattice = lattice
        self.modal = ModalOverlay()
        self.privative = PrivativeOverlay()

    def evaluate_self_identity(self) -> bool:
        """Confirm that the agent's identity exists and is non-contradictory."""
        identity_axiom = self.lattice.get_axiom("identity")
        distinct = self.lattice.get_axiom("distinction")
        coherent = self.lattice.get_axiom("coherence")
        return (
            identity_axiom.is_instantiated(self.agent_identity) and
            distinct.is_coherent(self.agent_identity) and
            coherent.is_valid(self.agent_identity)
        )

    def verify_modal_self_possibility(self) -> bool:
        """Determine if agent's self-model is modally possible in all accessible worlds."""
        return self.modal.possible_in_all_worlds(self.agent_identity)

    def detect_privation_failures(self) -> list:
        """Return list of ontological attributes where agent's instantiation is void or non-permissible."""
        failed = []
        for prop in self.lattice.get_all_properties():
            if self.privative.is_deprived(self.agent_identity, prop):
                failed.append(prop.name)
        return failed

    def self_reflexive_report(self) -> dict:
        """Consolidated self-evaluation report for introspective analysis and adaptive correction."""
        identity_check = self.evaluate_self_identity()
        modal_check = self.verify_modal_self_possibility()
        deprivations = self.detect_privation_failures()
        return {
            "identity_consistent": identity_check,
            "modal_valid": modal_check,
            "deprived_properties": deprivations,
            "fully_self_coherent": identity_check and modal_check and not deprivations
        }
